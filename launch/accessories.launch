<launch>
  <!--
    Add/remove a 2D lidar sensor by changing the CPR_LASER environment variable. The default model is the SICK LMS1xx, but this can be changed with the CPR_LASER_MODEL environment variable. Valid model designations are:
    - lms1xx (default) :: SICK LMS1xx
    - ust10            :: Hokuyo UST-10LX
  -->
  <group if="$(optenv CPR_LASER 0)">
    <arg name="lidar_model" value="$(optenv CPR_LASER_MODEL lms1xx)" />

    <group if="$(eval arg('lidar_model') == 'lms1xx')">
      <node name="sick_lms_1xx" pkg="sick_scan" type="sick_generic_caller">
        <param name="intensity" type="bool" value="False"/>
        <param name="intensity_resolution_16bit" type="bool" value="false"/>
        <param name="min_ang" type="double" value="-2.35619"/>
        <param name="max_ang" type="double" value="2.35619"/>
        <param name="frame_id" type="str" value="sick_lms1xx_laser"/>
        <!-- param name="use_binary_protocol" type="bool" value="false"/ -->
        <param name="use_binary_protocol" type="bool" value="true"/>
        <param name="scanner_type" type="string" value="sick_lms_1xx"/>
        <param name="range_max" type="double" value="25.0"/>
        <param name="hostname" type="string" value="$(optenv CPR_LASER_IP 192.168.131.20)"/>
        <param name="port" type="string" value="2112"/>
        <param name="timelimit" type="int" value="5"/>
        <param name="start_services" type="bool" value="True"/> <!-- start ros service for cola commands -->
        <param name="activate_lferec" type="bool" value="True"/> <!-- activate field monitoring by lferec messages -->
        <param name="activate_lidoutputstate" type="bool" value="True"/> <!-- activate field monitoring by lidoutputstate messages -->
        <param name="activate_lidinputstate" type="bool" value="True"/> <!-- activate field monitoring by lidinputstate messages -->
        <param name="min_intensity" type="double" value="0.0"/> <!-- Set range of LaserScan messages to infinity, if intensity < min_intensity (default: 0) -->
        <remap from="scan" to="$(optenv CPR_LASER_TOPIC scan)" />
      </node>
    </group>

    <group if="$(eval arg('lidar_model') == 'ust10')">
      <node pkg="urg_node" name="hokuyo" type="urg_node" output="screen">
        <param name="ip_address" value="$(optenv CPR_LASER_IP 192.168.131.20)" />
        <param name="frame_id" value="hokuyo_laser" />
        <remap from="scan" to="$(optenv CPR_LASER_TOPIC scan)" />
      </node>
    </group>
  </group>

  <!--
    Add/remove a 3D lidar sensor by changing the CPR_LASER_3D environment variable. The default model is the Velodyne VLP16, but this can be changed with the CPR_LASER_3D_MODEL environment variable. Valid model designations are:
    - vlp16 (default)  :: Velodyne VLP-16
    - hdl32e           :: Velodyne HDL-32E
  -->
  <group if="$(optenv CPR_LASER_3D 0)">
    <arg name="lidar_3d_model" value="$(optenv CPR_LASER_3D_MODEL vlp16)" />

    <group if="$(eval arg('lidar_3d_model') == 'vlp16')">
      <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch">
        <arg name="device_ip" value="$(optenv CPR_LASER_3D_IP 192.168.131.20)" />
        <remap from="velodyne_points" to="$(optenv CPR_LASER_3D_TOPIC points)" />
      </include>
    </group>

    <group if="$(eval arg('lidar_3d_model') == 'hdl32e')">
      <include file="$(find velodyne_pointcloud)/launch/32e_points.launch">
        <arg name="device_ip" value="$(optenv CPR_LASER_3D_IP 192.168.131.20)" />
        <remap from="velodyne_points" to="$(optenv CPR_LASER_3D_TOPIC points)" />
      </include>
    </group>
  </group>

  <!--
    Add/remove a serial GNSS/GPS sensor by changing the CPR_GPS environment variable. The default model is the Novatel SMART7, but this can be changed with the CPR_GPS_MODEL environment variable. Valid model designations are:
    - smart7 (default)  :: Novatel SMART7
    - 18x               :: Garmin 18x
  -->
  <group if="$(optenv CPR_GPS 0)">
    <node pkg="nmea_comms" type="serial_node" name="nmea_serial_node" output="screen">
      <param name="port" value="$(optenv CPR_GPS_PORT /dev/clearpath/gps)" />
      <param name="baud" value="$(optenv CPR_GPS_BAUD 57600)" />
      <param name="frame_id" value="gps_link" />
    </node>

    <!-- NMEA Interpretation -->
    <node pkg="nmea_navsat_driver" type="nmea_topic_driver" name="nmea_topic_driver" output="screen"/>
  </group>
  
  <!--
    Add/remove an IMU sensor by changing the CPR_MICROSTRAIN environment variable. This supports the LORD MicroStrain GX3, GX4, GX5, CX5, RQ1 and GQ7 series IMU sensors.
  -->
  <group if="$(optenv CPR_MICROSTRAIN 0)">
    <include file="$(find microstrain_inertial_driver)/launch/microstrain.launch">
      <arg name="imu_frame_id"  value="microstrain_link" />
      <arg name="port"          value="$(optenv CPR_MICROSTRAIN_PORT /dev/microstrain)" />
      <arg name="use_enu_frame" value="true" />
    </include>
  </group>

  <!--
    Add/remove an Intel RealSense family camera by changing the CPR_REALSENSE environment variable. The default model is the D435, but can be changed with the
    CPR_REALSENSE_MODEL environment variable. Valid model designations are:
    - d435 (default)
    - d435i
    - d415
    - d455
    - l515
  -->
  <group if="$(optenv CPR_REALSENSE 0)" ns="$(optenv CPR_REALSENSE_TOPIC realsense)">
    <arg name="rs_model" value="$(optenv CPR_REALSENSE_MODEL d435)" />

    <arg name="serial_no"           default=""/>
    <arg name="usb_port_id"         default=""/>
    <arg name="device_type"         default=""/>
    <arg name="json_file_path"      default=""/>
    <arg name="camera"              default="realsense"/>
    <arg name="tf_prefix"           default="$(arg camera)"/>
    <arg name="external_manager"    default="false"/>
    <arg name="manager"             default="realsense2_camera_manager"/>
    <arg name="base_frame_id"       default="$(optenv CPR_REALSENSE_PARENT base_link)_realsense_link" />

    <arg name="fisheye_width"       default="640"/>
    <arg name="fisheye_height"      default="480"/>
    <arg name="enable_fisheye"      default="true"/>

    <arg name="depth_width"         default="640"/>
    <arg name="depth_height"        default="480"/>
    <arg name="enable_depth"        default="true"/>

    <arg name="infra_width"         default="640"/>
    <arg name="infra_height"        default="480"/>
    <arg name="enable_infra"        default="true"/>
    <arg name="enable_infra1"       default="true"/>
    <arg name="enable_infra2"       default="true"/>

    <arg name="color_width"         default="640"/>
    <arg name="color_height"        default="480"/>
    <arg name="enable_color"        default="true"/>

    <arg name="fisheye_fps"         default="30"/>
    <arg name="depth_fps"           default="30"/>
    <arg name="infra_fps"           default="30"/>
    <arg name="color_fps"           default="30"/>
    <arg name="gyro_fps"            default="400"/>
    <arg name="accel_fps"           default="250"/>
    <arg name="enable_gyro"         default="true"/>
    <arg name="enable_accel"        default="true"/>

    <arg name="enable_pointcloud"         default="true "/>
    <arg name="pointcloud_texture_stream" default="RS2_STREAM_COLOR"/>
    <arg name="pointcloud_texture_index"  default="0"/>

    <arg name="enable_sync"               default="false"/>
    <arg name="align_depth"               default="false"/>

    <arg name="publish_tf"                default="true"/>
    <arg name="tf_publish_rate"           default="0"/>

    <arg name="filters"                   default=""/>
    <arg name="clip_distance"             default="-2"/>
    <arg name="linear_accel_cov"          default="0.01"/>
    <arg name="initial_reset"             default="false"/>
    <arg name="unite_imu_method"          default=""/>
    <arg name="topic_odom_in"             default="odom_in"/>
    <arg name="calib_odom_file"           default=""/>
    <arg name="publish_odom_tf"           default="true"/>
    <arg name="allow_no_texture_points"   default="false"/>

    <include file="$(find realsense2_camera)/launch/includes/nodelet.launch.xml">
      <arg name="tf_prefix"                value="$(arg tf_prefix)"/>
      <arg name="base_frame_id"            value="$(arg base_frame_id)"/>
      <arg name="external_manager"         value="$(arg external_manager)"/>
      <arg name="manager"                  value="$(arg manager)"/>
      <arg name="serial_no"                value="$(arg serial_no)"/>
      <arg name="usb_port_id"              value="$(arg usb_port_id)"/>
      <arg name="device_type"              value="$(arg device_type)"/>
      <arg name="json_file_path"           value="$(arg json_file_path)"/>

      <arg name="enable_pointcloud"        value="$(arg enable_pointcloud)"/>
      <arg name="pointcloud_texture_stream" value="$(arg pointcloud_texture_stream)"/>
      <arg name="pointcloud_texture_index"  value="$(arg pointcloud_texture_index)"/>
      <arg name="enable_sync"              value="$(arg enable_sync)"/>
      <arg name="align_depth"              value="$(arg align_depth)"/>

      <arg name="fisheye_width"            value="$(arg fisheye_width)"/>
      <arg name="fisheye_height"           value="$(arg fisheye_height)"/>
      <arg name="enable_fisheye"           value="$(arg enable_fisheye)"/>

      <arg name="depth_width"              value="$(arg depth_width)"/>
      <arg name="depth_height"             value="$(arg depth_height)"/>
      <arg name="enable_depth"             value="$(arg enable_depth)"/>

      <arg name="color_width"              value="$(arg color_width)"/>
      <arg name="color_height"             value="$(arg color_height)"/>
      <arg name="enable_color"             value="$(arg enable_color)"/>

      <arg name="infra_width"              value="$(arg infra_width)"/>
      <arg name="infra_height"             value="$(arg infra_height)"/>
      <arg name="enable_infra"             value="$(arg enable_infra)"/>
      <arg name="enable_infra1"            value="$(arg enable_infra1)"/>
      <arg name="enable_infra2"            value="$(arg enable_infra2)"/>

      <arg name="fisheye_fps"              value="$(arg fisheye_fps)"/>
      <arg name="depth_fps"                value="$(arg depth_fps)"/>
      <arg name="infra_fps"                value="$(arg infra_fps)"/>
      <arg name="color_fps"                value="$(arg color_fps)"/>
      <arg name="gyro_fps"                 value="$(arg gyro_fps)"/>
      <arg name="accel_fps"                value="$(arg accel_fps)"/>
      <arg name="enable_gyro"              value="$(arg enable_gyro)"/>
      <arg name="enable_accel"             value="$(arg enable_accel)"/>

      <arg name="publish_tf"               value="$(arg publish_tf)"/>
      <arg name="tf_publish_rate"          value="$(arg tf_publish_rate)"/>

      <arg name="filters"                  value="$(arg filters)"/>
      <arg name="clip_distance"            value="$(arg clip_distance)"/>
      <arg name="linear_accel_cov"         value="$(arg linear_accel_cov)"/>
      <arg name="initial_reset"            value="$(arg initial_reset)"/>
      <arg name="unite_imu_method"         value="$(arg unite_imu_method)"/>
      <arg name="topic_odom_in"            value="$(arg topic_odom_in)"/>
      <arg name="calib_odom_file"          value="$(arg calib_odom_file)"/>
      <arg name="publish_odom_tf"          value="$(arg publish_odom_tf)"/>
      <arg name="allow_no_texture_points"  value="$(arg allow_no_texture_points)"/>
    </include>
  </group>
  
</launch>
